// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  no            String
  // next-auth のドキュメントでは email をオプショナルにしているが、必須に変更している
  // name か email どちらかがセットされていれば良い仕様の場合は元に戻す
  // reference: https://next-auth.js.org/adapters/prisma
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  password   String
  roleId    String
  role    Role     @relation(fields: [roleId], references: [id])
  //fromThanksCards ThanksCard[] @relation("FromThanksCards")
  //toThanksCards ThanksCard[] @relation("ToThanksCards")
  officeId String
  office Office     @relation(fields: [officeId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id            String    @id @default(cuid())
  name      String    @unique
  users User[]
}


//model ThanksCard {
  //id            String    @id @default(cuid())
 // title      String
  //body      String
  //from    User     @relation("FromThanksCards", fields: [fromId], references: [id])
  //fromId  String
  //to    User     @relation("ToThanksCards", fields: [toId], references: [id])
  //toId  String
  //createdAt DateTime @default(now())
//}


model Office {
  id            String    @id @default(cuid())
  code      String   @unique
  name      String
  parentId  String?
  parent    Office?     @relation("Parent Children", fields: [parentId], references: [id])
  children Office[]     @relation("Parent Children")
  users User[]
}
